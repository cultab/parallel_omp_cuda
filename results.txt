# conv

> ./conv

        Attemping to use 1716 MiB per 15000x15000 matrix!

Diagonal's max = 189.200000

> ./conv

        Attemping to use 0 MiB per 5x5 matrix!

Matrix A
 58.00  89.00  84.00  32.00  19.00
 64.00  31.00  24.00  69.00   7.00
 13.00  47.00  84.00  13.00  25.00
 91.00  12.00  95.00  13.00  60.00
 95.00  21.00  13.00  58.00  84.00
Matrix B
  0.00   0.00   0.00   0.00   0.00
  0.00  13.20  56.10  90.70   0.00
  0.00  12.10  60.20  46.90   0.00
  0.00 -92.70 106.00 -17.20   0.00
  0.00   0.00   0.00   0.00   0.00
Diagonal's max = 60.200000

# covar 

> ./covar
A (4x5):
  3.00   6.00   7.00   5.00   3.00
  5.00   6.00   2.00   9.00   1.00
  2.00   7.00   0.00   9.00   3.00
  6.00   0.00   6.00   2.00   6.00
Time of first kernel:  0.0 ms
Time of second kernel:  0.5 ms
A - average of column (4x5):
 -1.00   1.25   3.25  -1.25  -0.25
  1.00   1.25  -1.75   2.75  -2.25
 -2.00   2.25  -3.75   2.75  -0.25
  2.00  -4.75   2.25  -4.25   2.75
Transpose (5x4):
 -1.00   1.00  -2.00   2.00
  1.25   1.25   2.25  -4.75
  3.25  -1.75  -3.75   2.25
 -1.25   2.75   2.75  -4.25
 -0.25  -2.25  -0.25   2.75
Result (4x4):
 14.75  -8.00 -10.75   4.00
 -8.00  18.25  15.50 -25.75
-10.75  15.50  30.75 -35.50
  4.00 -25.75 -35.50  57.25

> ./covar
A (3x7):
  3.00   6.00   7.00   5.00   3.00   5.00   6.00
  2.00   9.00   1.00   2.00   7.00   0.00   9.00
  3.00   6.00   0.00   6.00   2.00   6.00   1.00
Time of first kernel:  0.0 ms
Time of second kernel:  0.5 ms
A - average of column (3x7):
  0.33  -1.00   4.33   0.67  -1.00   1.33   0.67
 -0.67   2.00  -1.67  -2.33   3.00  -3.67   3.67
  0.33  -1.00  -2.67   1.67  -2.00   2.33  -4.33
Transpose (7x3):
  0.33  -0.67   0.33
 -1.00   2.00  -1.00
  4.33  -1.67  -2.67
  0.67  -2.33   1.67
 -1.00   3.00  -2.00
  1.33  -3.67   2.33
  0.67   3.67  -4.33
Result (3x3):
 23.56 -16.44  -7.11
-16.44  48.56 -32.11
 -7.11 -32.11  39.22

# mat vec

> ./mat_vec
A (4x5):
  3.00   6.00   7.00   5.00   3.00
  5.00   6.00   2.00   9.00   1.00
  2.00   7.00   0.00   9.00   3.00
  6.00   0.00   6.00   2.00   6.00
x (5x1):
1961.00
2821.00
1825.00
3566.00
1506.00
result of A * x (1x4):
151.00 150.00 145.00  78.00
At (5x4):
  3.00   5.00   2.00   6.00
  6.00   6.00   7.00   0.00
  7.00   2.00   0.00   6.00
  5.00   9.00   9.00   2.00
  3.00   1.00   3.00   6.00
final result of At * A * x (1x5):
1961.00 2821.00 1825.00 3566.00 1506.00

> ./mat_vec
A (3x7):
  3.00   6.00   7.00   5.00   3.00   5.00   6.00
  2.00   9.00   1.00   2.00   7.00   0.00   9.00
  3.00   6.00   0.00   6.00   2.00   6.00   1.00
x (7x1):
1018.00
2631.00
1288.00
1631.00
1520.00
1393.00
2166.00
result of A * x (1x3):
167.00 119.00  93.00
At (7x3):
  3.00   2.00   3.00
  6.00   9.00   6.00
  7.00   1.00   0.00
  5.00   2.00   6.00
  3.00   7.00   2.00
  5.00   0.00   6.00
  6.00   9.00   1.00
final result of At * A * x (1x7):
1018.00 2631.00 1288.00 1631.00 1520.00 1393.00 2166.00

# multisort

> ./multisort 100 4
Original:
19 64 7 21 95 13 25 24 69 46 69 70 27 4 9 17 40 51 58 47 31 12 60 25 24 69 59 46 69 70 27 4 9 17 40 51 24 69 59 16 28 83 72 84 46 69 70 27 4 9 17 40 31 12 13 25 24 69 59 16 46 69 70 27 4 9 17 40 58 47 32 89 84 19 64 91 51 79 91 89 94 63 85 53 69 59 16 83 72 84 19 48 46 69 70 27 4 9 17 40
Using 12 thread(s)!
        Took 0.003323 seconds to sort array of 100 elements,
        while falling back to quicksort for chunks with less than 4 elements!
Result:
4 4 4 4 4 7 9 9 9 9 9 12 12 13 13 16 16 16 17 17 17 17 17 19 19 19 21 24 24 24 24 25 25 25 27 27 27 27 27 28 31 31 32 40 40 40 40 40 46 46 46 46 46 47 47 48 51 51 51 53 58 58 59 59 59 59 60 63 64 64 69 69 69 69 69 69 69 69 69 69 70 70 70 70 70 72 72 79 83 83 84 84 84 85 89 89 91 91 94 95

> ./multisort 10 4
Original:
58 64 84 32 89 58 58 58 47 19
Using 12 thread(s)!
        Took 0.000435 seconds to sort array of 10 elements,
        while falling back to quicksort for chunks with less than 4 elements!
Result:
19 32 47 58 58 58 58 64 84 89
